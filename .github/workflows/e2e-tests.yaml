name: e2e-tests
on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container: docker.io/library/golang:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Go Tidy
        run: go mod tidy
      - name: Git Diff
        run: git diff --exit-code
      - name: Go Build
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -mod vendor -o manager main.go
  tests:
    name: Tests
    runs-on: ubuntu-latest
    container: docker.io/library/golang:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: OS Dependencies
        run: apt-get update && apt-get install -y tar make gcc
      - name: Install Kubebuilder
        run: |
          os=$(go env GOOS)
          arch=$(go env GOARCH)
          curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_${os}_${arch}.tar.gz | tar -xz -C /tmp/
          mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
          export PATH=$PATH:/usr/local/kubebuilder/bin
      - name: Install kubectl
        run: |
          curl -Lo /usr/local/bin/kubectl "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x /usr/local/bin/kubectl
      - name: Install kuttl
        run: |
          curl -Lo /usr/local/bin/kubectl-kuttl https://github.com/kudobuilder/kuttl/releases/download/v0.12.1/kubectl-kuttl_0.12.1_linux_x86_64
          chmod +x /usr/local/bin/kubectl-kuttl
          export PATH=$PATH:/usr/local/bin
      - name: Install and start K3S
        run: |
          if ! echo "${{ matrix.install_k3s_version }}" | egrep '^v[0-9]+\.[0-9]+\.[0-9]+\+k3s1$'; then
          export INSTALL_K3S_VERSION=v1.26.3+k3s1
          else
          export INSTALL_K3S_VERSION=${{ matrix.install_k3s_version }}
          fi
          curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh -
          until kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml cluster-info ; do sleep 10s ; done
          cp /etc/rancher/k3s/k3s.yaml /home/runner/.kubeconfig
          echo "- name: fake_token_user" >> $KUBECONFIG
          echo "  user:" >> $KUBECONFIG
          echo "    token: xxxxxx" >> $KUBECONFIG
          until kubectl cluster-info ; do sleep 10s ; done
      - name: kind cluster
        run: |
          go install sigs.k8s.io/kind@latest && kind create cluster
      - name: Tests
        run: make e2e